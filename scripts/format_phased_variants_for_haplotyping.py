import sys
#usage: 
### first create connected components from disco (-A option)
#sh from_phased_alleles_to_clusters.sh phased_alleles_read_set_id_1.txt # creates file connected_components_phased_alleles_read_set_id_1.txt
### them from the .fa file, the id of the set your interested in (e.g. 1 for phased_alleles_read_set_id_1.txt, this will correspond to C1 coverage in the fa file), the file containing the connected components, and the phased_alleles_read_set_id_X.txt file, generate the fact file
#python format_phased_variants_for_haplotyping.py mapping_k_31_c_auto_D_100_P_10_b_0_coherent.fa 1 connected_components_phased_alleles_read_set_id_1.txt phased_alleles_read_set_id_1.txt  > phased_alles_read_set_1_facts.txt


if not len(sys.argv)==5:
    print ("usage: python format_phased_variants_for_haplotyping.py <file coherent.fa> <id number><connected_component_file><phased_allele_file>")
    print (" * coherent.fa file: the file generated by discoSnp")
    print (" * id number is the id of the read set, for which variants are phased. With i, this corresponds to Ci in the .fa file headers.")
    print (" * connected_component_file: file obtained from \"from_phased_alleles_to_clusters.sh phased_alleles_read_set_id_1.txt\" continaing connected component of phased alleles")
    print (" * phased_alleles_read_set_id_1.txt: file generated by discoSnp (with the hidden -A option. The value 1 here shoud correspond to \"id number\"")
    sys.exit(0)

coherent_fa_file = open(sys.argv[1])
set_id = sys.argv[2]
cc_file = open(sys.argv[3])
phased_alleles_file = open(sys.argv[4])



def store_abundances(coherent_fa_file,set_id):
    pos_coverage_determined=False
    pos_coverage=-1
    coverages={}                    #snp id (991h) -> coverage in the right read set 
    for oline in coherent_fa_file:  #>SNP_higher_path_991|P_1:30_C/G|high|nb_pol_1|C1_38|C2_0|Q1_0|Q2_0|G1_0/0:6,119,764|G2_1/1:664,104,6|rank_1
        if oline[0] != '>': continue
        line=oline.rstrip().split('|')
        id=line[0].split('_')[-1]    #here 991
        id+=line[0].split('_')[1][0] #'h' or 'l'
        if not pos_coverage_determined:
            for pos_coverage in range(len(line)):
                if line[pos_coverage][0]=='C':
                    value=line[pos_coverage][1:].split('_')[0]
                    if value==set_id:
                        pos_coverage_determined=True
                        break
            if not pos_coverage_determined:
            assert pos_coverage_determined, "Set id "+ str(set_id)+ " not findable in header like "+ oline.rstrip()
        coverages[id]=line[pos_coverage].split('_')[1] # get the right coverage corresponding to the searche read set
    return coverages
    

def store_cc(cc_file):
    cc={}
    for i,oline in enumerate (cc_file): # 852 1891 3484 2641 5758 3247
        oline=oline.rstrip().split()
        for idf in oline: 
            idf=int(idf)
            assert idf not in cc, "ERROR, idf is in more than one connected component"
            cc[idf]=i
    return cc
        


def store_phased_alleles(phased_alleles_file):
    phased_alleles={}
    for oline in phased_alleles_file:               #-129h_0;552l_38;-449h_33; => 2
        oline=oline.lstrip().rstrip()
        if oline[0]=='#': continue
        ids = oline.split(' ')[0].split(';')[:-1]   # -129h_0552l_38 -449h_33
        abundance = int(oline.split(' ')[-1])       # 2
        idlist=[]                                   # -129h_0552l_38 -449h_33 (as list)
        
        for aid in ids: 
            # if aid[0]=='-': # remove the '-'
            #     aid=aid[1:]
            idlist.append(aid)
            
        # canonical representation: smallest first (removing with the strip function the eventual first '-' sign): 
        if int(idlist[0].split('_')[0].strip('-')[:-1])>int(idlist[-1].split('_')[0].strip('-')[:-1]):
            idlist.reverse()
            # change the ortientation = change the sign: 
            for i in range(len(idlist)):
                if idlist[i][0]=='-': idlist[i]=idlist[i][1:]
                else: idlist[i]='-'+idlist[i]
            # change the orientation = change the distance to the previous one. 
            # -d_0;-c_5;-b_2;-a_4 is reversed into a_4;b_2_c_5_d_0 which is false. 
            # In fact a and b separated by 4, b and c by 2 and c and d by 5. 
            # d....c.b...a
            # Thus the final order is a_0;b_4;c_2;d_5
            previous="0"
            for i in range(len(idlist)):
                future_previous=idlist[i].split('_')[-1]
                idlist[i]=idlist[i].split('_')[0]+'_'+previous
                previous=future_previous


        list_as_string = ""
        for aid in idlist:
            list_as_string+=aid+';'
        # add the list to the phased_alleles or increase its count if not existing:
        if list_as_string in phased_alleles: 
            phased_alleles[list_as_string]+=abundance
        else: 
            phased_alleles[list_as_string]=abundance

                
    return phased_alleles

    
def print_djack_formated_phased_variants(coverages,cc,phased_alleles):
    for aid in coverages:                                                                                               #snp id (991h) -> coverage 
        current_snp_id=int(aid[:-1])                                                                                    #991
        if current_snp_id in cc:                                                                                        #necessary test?
            print("snp(cc"+str(cc[current_snp_id])+","+str(current_snp_id)+","+aid[-1]+","+str(coverages[aid])+").")    #"snp(cc_12,991h,coverage)"
            
    for i,list_as_string in enumerate(phased_alleles):                                                                  #'-129h_0;552l_38;-449h_33;': 2
        ids=list_as_string.split(';')[:-1]                                                                              # ['-129h_0', '552l_38',  '-449h_33']
        abundance = phased_alleles[list_as_string]                                                                      # 2
        first_id=abs(int(ids[0].split('_')[0][:-1]))                                                                    # 129
        assert first_id in cc, "SNP"+str(first_id)+"in facts but not in connected components"
        this_cc=cc[first_id]                                                                                            # eg 555
        for j in range(1,len(ids)):                                                                                     # all other allele ids
            assert abs(int(ids[j].split('_')[0][:-1])) in cc, "SNP"+str(first_id)+"in facts but not in connected components"
            assert cc[abs(int(ids[j].split('_')[0][:-1]))] == this_cc, "impossible all variants from "+list_as_stringâ‰  "are not in the same CC"
            # if abs(int(ids[j].split('_')[0][:-1])) in cc and cc[abs(int(ids[j].split('_')[0][:-1]))] != this_cc:        #
                # print("impossible all variants from ",list_as_string, "are not in the same CC")
                # sys.exit(0)
        
        
        for node_order,aid in enumerate(ids):                                                                           # ['-129h_0', '552l_38',  '-449h_33']
            # fact(cc_id, fact number, allele number in the fact, allele snp id, allele path (h/l), distance wrt to previous variant in the path)
            print("fact(cc"+str(this_cc)+","+str(i)+","+str(node_order+1)+","+aid.split('_')[0][:-1]+","+aid.split('_')[0][-1]+","+aid.split('_')[1]+").")
        print("count("+str(i)+","+str(abundance)+").")
        
            

coverages=store_abundances(coherent_fa_file,set_id)

cc=store_cc(cc_file)
phased_alleles=store_phased_alleles(phased_alleles_file)
print_djack_formated_phased_variants(coverages,cc,phased_alleles)
