#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import getopt
import fasta_and_vcf_to_fasta  as fvf
import os.path
import subprocess

def usage():
    '''Usage'''
    print("----------------------------------------------------------------------------------------------------------------------------------------------------------")
    print(sys.argv[0]," : from a (filtered) vcf file and a fasta file (both generated by discoSnpRad) together with a reference genome:")
    print("\t Outputs a fasta file limited to variants contained in the VCF and a new VCF file indicating the position of variants correctly mapped on the reference genome")
    print("----------------------------------------------------------------------------------------------------------------------------------------------------------")
    print("usage: ",sys.argv[0], "arguments")
    print(" -f raw fasta file file                              [mandatory]")
    print(" -G reference genome                                 [mandatory]")
    print(" -v vcf file                                         [optional - if no vcf is provided, variants from the original fasta file are mapped]")
    print(" -p: prefix of output files (prefix.fa & prefix.vcf) [mandatory]")
    print(" -h: help")
    print("----------------------------------------------------------------------------------------------------------------------------------------------------------")
    sys.exit(2)


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hv:f:p:G:")
    except getopt.GetoptError as err:
        # print help information and exit:
        usage()
        sys.exit(2)
        
        
    # get the current directory path:
    this_script_path = os.path.dirname(os.path.realpath(__file__)) # ...gatb-discosnp/RAD/scripts
    vcf_creator_path = "/".join(this_script_path.split("/")[:-2])  # .../gatb-discosnp
    vcf_creator_path+= "/scripts/run_VCF_creator.sh"              # ...gatb-discosnp/scripts
    
    if not  os.path.exists(vcf_creator_path):
        print ("Error, vcf creator not found in \""+vcf_creator_path+"\"", file=sys.stderr)
    
    # Default parameters
    in_vcf_file     =       None
    in_fasta_file   =       None
    out_file_prefix =       None
    reference_genome =      None
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-f"):
            in_fasta_file = arg
        elif opt in ("-v"):
            in_vcf_file = arg
        elif opt in ("-G"):
            reference_genome = arg
        elif opt in ("-p"):
            out_file_prefix = arg
        else:
            assert False, "unhandled option"



    if in_fasta_file==None:
        print ("-f missing")
        usage()
        sys.exit(2)

    if reference_genome==None:
        print ("-G missing")
        usage()
        sys.exit(2)

    if out_file_prefix==None:
        print ("-p missing")
        usage()
        sys.exit(2)
        
    ### CREATES A FASTA FILE LIMITED TO INPUT VCF IF NECESSARY
    if in_vcf_file:
        to_map_fasta_file_name = out_file_prefix+".fa"
        fvf.output_newfasta(in_vcf_file, in_fasta_file, to_map_fasta_file_name)
    else:
        to_map_fasta_file_name=in_fasta_file
    
    ### Call VCF creator of the reference genome and the fasta file to map
    vcf_cmd = vcf_creator_path+" -G "+reference_genome+" -p "+to_map_fasta_file_name+" -o "+out_file_prefix+".vcf"
    print ("Running command \""+vcf_cmd+"\"")
    returned_value = subprocess.call(vcf_cmd, shell=True) 
    
if __name__ == "__main__":
    main()
