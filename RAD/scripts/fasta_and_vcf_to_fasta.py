#!/usr/bin/env python
# -*- coding: utf-8 -*-

import sys
import getopt


def usage():
    '''Usage'''
    print("-----------------------------------------------------------------------------")
    print(sys.argv[0]," : from a fasta file generated by discoSnpRad and a (filtered) vcf file, output a fasta file limited to variants present in the vcf.")
    print("-----------------------------------------------------------------------------")
    print("usage: ",sys.argv[0])
    print(" -v vcf file [mandatory]")
    print(" -f raw fasta file file [mandatory]")
    print("  -o: output fasta file path (default = stdout)")
    print("  -h: help")
    print("-----------------------------------------------------------------------------")
    sys.exit(2)


def output_newfasta(in_vcf_file, in_fasta_file, out_file):

    filin = open(in_vcf_file, 'r')
    ## store ids to print
    ids_to_print=set()
    for line in filin.readlines():
        line=line.strip()
        if line[0]=="#": continue
    #SNP_higher_path_3       199     3       C       G       .       .       Ty=SNP;Rk=1.0;UL=86;UR=261;CL=169;CR=764;Genome=.;Sd=.;Cluster=0;ClSize=3  ...
        ids_to_print.add(line.split()[0])
    filin.close()
    
    ## Print fasta 
    if out_file:
        filout=open(out_file,'w')
    else:
        filout = sys.stdout
        
    filin_fasta = open(in_fasta_file,"r")
    while(True):
        line1=filin_fasta.readline() #>SNP_lower_path_999996|P_1:30_C/G,P_2:31_A/G,P_3:34_T/A|high|nb_pol_3...
        if not line1: break
        line2=filin_fasta.readline()
        line3=filin_fasta.readline()
        line4=filin_fasta.readline()
        if line1.split("|")[0][1:] in ids_to_print or line3.split("|")[0][1:] in ids_to_print:
            filout.write (line1+line2+line3+line4)

    
    filin_fasta.close()
    filout.close()



def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], "hv:f:o:")
    except getopt.GetoptError as err:
        # print help information and exit:
        usage()
        sys.exit(2)
    
    # Default parameters
    in_vcf_file =       None
    in_fasta_file = None
    out_file =      None
    for opt, arg in opts:
        if opt in ("-h", "--help"):
            usage()
            sys.exit()
        elif opt in ("-f"):
            in_fasta_file = arg
        elif opt in ("-v"):
            in_vcf_file = arg
        elif opt in ("-o", "--out"):
            out_file = arg
        else:
            assert False, "unhandled option"

    if in_vcf_file==None:
        print ("-v missing")
        usage()
        sys.exit(2)

    if in_fasta_file==None:
        print ("-f missing")
        usage()
        sys.exit(2)
    output_newfasta(in_vcf_file, in_fasta_file, out_file)

    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

    import sys
    import getopt


    def usage():
        '''Usage'''
        print("----------------------------------------------------------------------------------------------------------------------------------------------------------")
        print(sys.argv[0]," : from a (filtered) vcf file and a fasta file (both generated by discoSnpRad) - ouput a fasta file limited to variants contained in the VCF")
        print("\t Useful when some filtering has been done on a vcf file, and one wants the fasta version of the remaining variants")
        print("----------------------------------------------------------------------------------------------------------------------------------------------------------")
        print("usage: ",sys.argv[0])
        print(" -v vcf file [mandatory]")
        print(" -f raw fasta file file [mandatory]")
        print(" -o: output vcf file path (default = stdout)")
        print(" -h: help")
        print("----------------------------------------------------------------------------------------------------------------------------------------------------------")
        sys.exit(2)


    def output_newfasta(in_vcf_file, in_fasta_file, out_file):

        filin = open(in_vcf_file, 'r')
        ## store ids to print
        ids_to_print=set()
        for line in filin.readlines():
            line=line.strip()
            if line[0]=="#": continue
        #SNP_higher_path_3       199     3       C       G       .       .       Ty=SNP;Rk=1.0;UL=86;UR=261;CL=169;CR=764;Genome=.;Sd=.;Cluster=0;ClSize=3  ...
            ids_to_print.add(line.split()[0])
        filin.close()
    
        ## Print fasta 
        if out_file:
            filout=open(out_file,'w')
        else:
            filout = sys.stdout
        
        filin_fasta = open(in_fasta_file,"r")
        while(True):
            line1=filin_fasta.readline() #>SNP_lower_path_999996|P_1:30_C/G,P_2:31_A/G,P_3:34_T/A|high|nb_pol_3...
            if not line1: break
            line2=filin_fasta.readline()
            line3=filin_fasta.readline()
            line4=filin_fasta.readline()
            if line1.split("|")[0][1:] in ids_to_print or line3.split("|")[0][1:] in ids_to_print: # either the either or lower is in the vcf
                filout.write (line1+line2+line3+line4)

    
        filin_fasta.close()
        filout.close()



    def main():
        try:
            opts, args = getopt.getopt(sys.argv[1:], "hv:f:o:")
        except getopt.GetoptError as err:
            # print help information and exit:
            usage()
            sys.exit(2)
    
        # Default parameters
        in_vcf_file =       None
        in_fasta_file = None
        out_file =      None
        for opt, arg in opts:
            if opt in ("-h", "--help"):
                usage()
                sys.exit()
            elif opt in ("-f"):
                in_fasta_file = arg
            elif opt in ("-v"):
                in_vcf_file = arg
            elif opt in ("-o", "--out"):
                out_file = arg
            else:
                assert False, "unhandled option"

        if in_vcf_file==None:
            print ("-v missing")
            usage()
            sys.exit(2)

        if in_fasta_file==None:
            print ("-f missing")
            usage()
            sys.exit(2)
        output_newfasta(in_vcf_file, in_fasta_file, out_file)
    
    
    if __name__ == "__main__":
        main()
    